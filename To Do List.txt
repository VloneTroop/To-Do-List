<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript To-Do List</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
        }
        
        .todo-container {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .input-group {
            display: flex;
            margin-bottom: 20px;
            gap: 10px;
        }
        
        #task-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        #priority-select {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        #add-btn {
            padding: 10px 20px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        
        #add-btn:hover {
            background-color: #27ae60;
        }
        
        .task-list {
            list-style-type: none;
            padding: 0;
        }
        
        .task-item {
            display: flex;
            align-items: center;
            padding: 12px;
            margin-bottom: 8px;
            background-color: #f9f9f9;
            border-radius: 4px;
            transition: all 0.3s ease;
        }
        
        .task-item:hover {
            background-color: #f0f0f0;
        }
        
        .task-checkbox {
            margin-right: 12px;
            transform: scale(1.2);
        }
        
        .task-text {
            flex: 1;
            font-size: 16px;
        }
        
        .task-text.completed {
            text-decoration: line-through;
            color: #95a5a6;
        }
        
        .priority {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            margin-right: 10px;
            color: white;
        }
        
        .priority-low {
            background-color: #3498db;
        }
        
        .priority-medium {
            background-color: #f39c12;
        }
        
        .priority-high {
            background-color: #e74c3c;
        }
        
        .delete-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 6px 10px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .delete-btn:hover {
            background-color: #c0392b;
        }
        
        .stats {
            margin-top: 20px;
            padding: 15px;
            background-color: #ecf0f1;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .filter-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .filter-btn {
            padding: 8px 15px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .filter-btn.active {
            background-color: #2980b9;
        }
        
        .date-display {
            font-size: 12px;
            color: #7f8c8d;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="todo-container">
        <h1>To-Do List</h1>
        
        <div class="input-group">
            <input type="text" id="task-input" placeholder="Enter a new task...">
            <select id="priority-select">
                <option value="low">Low</option>
                <option value="medium" selected>Medium</option>
                <option value="high">High</option>
            </select>
            <button id="add-btn">Add Task</button>
        </div>
        
        <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="active">Active</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
        </div>
        
        <ul class="task-list" id="task-list"></ul>
        
        <div class="stats" id="stats">
            <div>Total tasks: <span id="total-count">0</span></div>
            <div>Completed: <span id="completed-count">0</span></div>
            <div>Pending: <span id="pending-count">0</span></div>
        </div>
    </div>

    <script>
        // ToDoList class to manage tasks
        class ToDoList {
            constructor() {
                this.tasks = JSON.parse(localStorage.getItem('tasks')) || [];
                this.currentFilter = 'all';
                this.init();
            }
            
            init() {
                this.renderTasks();
                this.setupEventListeners();
                this.updateStats();
            }
            
            setupEventListeners() {
                // Add task button
                document.getElementById('add-btn').addEventListener('click', () => this.addTask());
                
                // Enter key in input field
                document.getElementById('task-input').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.addTask();
                });
                
                // Filter buttons
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                        btn.classList.add('active');
                        this.currentFilter = btn.dataset.filter;
                        this.renderTasks();
                    });
                });
            }
            
            addTask() {
                const input = document.getElementById('task-input');
                const description = input.value.trim();
                const priority = document.getElementById('priority-select').value;
                
                if (description) {
                    const newTask = {
                        id: Date.now(),
                        description,
                        priority,
                        completed: false,
                        createdAt: new Date().toISOString()
                    };
                    
                    this.tasks.push(newTask);
                    this.saveTasks();
                    this.renderTasks();
                    this.updateStats();
                    input.value = '';
                }
            }
            
            toggleTaskCompletion(taskId) {
                const task = this.tasks.find(t => t.id === taskId);
                if (task) {
                    task.completed = !task.completed;
                    this.saveTasks();
                    this.renderTasks();
                    this.updateStats();
                }
            }
            
            deleteTask(taskId) {
                this.tasks = this.tasks.filter(t => t.id !== taskId);
                this.saveTasks();
                this.renderTasks();
                this.updateStats();
            }
            
            saveTasks() {
                localStorage.setItem('tasks', JSON.stringify(this.tasks));
            }
            
            getFilteredTasks() {
                switch (this.currentFilter) {
                    case 'active':
                        return this.tasks.filter(task => !task.completed);
                    case 'completed':
                        return this.tasks.filter(task => task.completed);
                    default:
                        return this.tasks;
                }
            }
            
            renderTasks() {
                const taskList = document.getElementById('task-list');
                taskList.innerHTML = '';
                
                const filteredTasks = this.getFilteredTasks();
                
                if (filteredTasks.length === 0) {
                    taskList.innerHTML = '<li style="text-align: center; color: #95a5a6;">No tasks found</li>';
                    return;
                }
                
                filteredTasks.forEach(task => {
                    const li = document.createElement('li');
                    li.className = 'task-item';
                    
                    // Checkbox
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.className = 'task-checkbox';
                    checkbox.checked = task.completed;
                    checkbox.addEventListener('change', () => this.toggleTaskCompletion(task.id));
                    
                    // Task text
                    const span = document.createElement('span');
                    span.className = `task-text ${task.completed ? 'completed' : ''}`;
                    span.textContent = task.description;
                    
                    // Priority badge
                    const priorityBadge = document.createElement('span');
                    priorityBadge.className = `priority priority-${task.priority}`;
                    priorityBadge.textContent = task.priority.toUpperCase();
                    
                    // Date display
                    const dateDisplay = document.createElement('span');
                    dateDisplay.className = 'date-display';
                    const date = new Date(task.createdAt);
                    dateDisplay.textContent = date.toLocaleDateString();
                    
                    // Delete button
                    const deleteBtn = document.createElement('button');
                    deleteBtn.className = 'delete-btn';
                    deleteBtn.textContent = 'Delete';
                    deleteBtn.addEventListener('click', () => this.deleteTask(task.id));
                    
                    li.appendChild(checkbox);
                    li.appendChild(priorityBadge);
                    li.appendChild(span);
                    li.appendChild(dateDisplay);
                    li.appendChild(deleteBtn);
                    
                    taskList.appendChild(li);
                });
            }
            
            updateStats() {
                const total = this.tasks.length;
                const completed = this.tasks.filter(task => task.completed).length;
                const pending = total - completed;
                
                document.getElementById('total-count').textContent = total;
                document.getElementById('completed-count').textContent = completed;
                document.getElementById('pending-count').textContent = pending;
            }
        }
        
        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new ToDoList();
        });
    </script>
</body>
</html>